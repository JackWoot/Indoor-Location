n = length(X)
x = (w %*% X)
return(x)
}
forecast_n = function(X, f) {
n = length(X)
for (i in (n+1):(n+f)) {
gamma = acf(X, lag.max = (i-1), plot = FALSE, type = "covariance")
gamma = gamma$acf
weights = yw_estimate_arma(gamma = gamma)
X[i] = forecast_one(X = X, w = weights)
print(i)
}
return(X[(n+1):(n+f)])
}
forecast_arma = forecast_n(arma11$ts, 100)
yw_estimate_arma = function(gamma) {
p = length(gamma)
a = matrix(rep(NA, p*p), ncol = p)
for (i in 1:p) {
for (j in 1:p) {
a[i,j] = gamma[abs(i-j)+1]
}
}
b = gamma
w = solve(a, b)
return(w)
}
forecast_one = function(X, w) {
n = length(X)
x = (w %*% X)
return(x)
}
forecast_n = function(X, f) {
n = length(X)
for (i in (n+1):(n+f)) {
gamma = acf(X, lag.max = (i-1), plot = FALSE, type = "covariance")
gamma = gamma$acf
weights = yw_estimate_arma(gamma = gamma)
X[i] = forecast_one(X = X, w = weights)
print(i)
}
return(X[(n+1):(n+f)])
}
forecast_arma = forecast_n(arma11$ts, 100)
plot(c(arma11$ts,forecast_arma), type = "l", main = "My ARMA Forecast")
weights = yw_estimate_arma(gamma = gamma)
length(weights)
weights
stationary = function(phi) {
phi = phi * -1
phi = c(1, phi)
return(min(Mod(polyroot(phi))) > 1)
invertible = function(theta) {
}
return(min(Mod(polyroot(theta))) > 1)
}
}
Arma = function(n, theta, phi) {
mu = 0
X = numeric(n)
theta = c(1, theta)
q = length(theta)
p = length(phi)
epsilon = rnorm(q, 0, 1)
X[1:p] = rep(0, p)
for (t in (p+1):(n+p)) {
new_epsilon = rnorm(1, 0, 1)
X[t] = (theta %*% rev(epsilon)) + (phi %*% (X[(t-1):(t-p)] - mu))
epsilon = c(epsilon[-1], new_epsilon)
}
returnVals = list()
returnVals$ts = X[-(1:p)]
returnVals$stationary = stationary(phi)
returnVals$invertible = invertible(theta)
return(returnVals)
}
arma11 = Arma(1000, 0.25, 0.75)
(gamma = acf(arma11$ts, lag.max = length(arma11$ts), type = "covariance"))
gamma = gamma$acf
yw_estimate_arma = function(gamma) {
p = length(gamma)
a = matrix(rep(0, p*p), ncol = p)
for (i in 1:p) {
for (j in 1:p) {
a[i,j] = gamma[abs(i-j)+1]
}
}
b = gamma
w = solve(a, b)
return(w)
}
forecast_n = function(X, f) {
n = length(X)
k = 0
Y = numeric(k)
for (t in (n+1):(n+f)) {
gamma = acf(c(X, Y), lag.max = length(c(X,Y)), plot = FALSE, type = "covariance")
gamma = gamma$acf[(k+1):(n+k)]
weights = yw_estimate_arma(gamma = gamma)
Y[k+1] = weights %*% X
k = k + 1
}
return(Y)
}
forecast_arma = forecast_n(arma11$ts, 100)
plot(forecast_arma, type = "l", main = "My ARMA Forecast")
plot(c(arma11$ts,forecast_arma), type = "l", main = "My ARMA Forecast")
rm(list=ls())
stationary = function(phi) {
phi = phi * -1
phi = c(1, phi)
return(min(Mod(polyroot(phi))) > 1)
}
}
return(min(Mod(polyroot(theta))) > 1)
invertible = function(theta) {
}
Arma = function(n, theta, phi) {
X = numeric(n)
mu = 0
theta = c(1, theta)
q = length(theta)
p = length(phi)
X[1:p] = rep(0, p)
epsilon = rnorm(q, 0, 1)
for (t in (p+1):(n+p)) {
new_epsilon = rnorm(1, 0, 1)
X[t] = (theta %*% rev(epsilon)) + (phi %*% (X[(t-1):(t-p)] - mu))
epsilon = c(epsilon[-1], new_epsilon)
}
returnVals = list()
returnVals$ts = X[-(1:p)]
returnVals$stationary = stationary(phi)
returnVals$invertible = invertible(theta)
return(returnVals)
}
arma11 = Arma(1000, 0.25, 0.75)
stationary = function(phi) {
phi = phi * -1
phi = c(1, phi)
return(min(Mod(polyroot(phi))) > 1)
}
invertible = function(theta) {
return(min(Mod(polyroot(theta))) > 1)
}
}
Arma = function(n, theta, phi) {
X = numeric(n)
mu = 0
theta = c(1, theta)
q = length(theta)
p = length(phi)
epsilon = rnorm(q, 0, 1)
X[1:p] = rep(0, p)
for (t in (p+1):(n+p)) {
new_epsilon = rnorm(1, 0, 1)
X[t] = (theta %*% rev(epsilon)) + (phi %*% (X[(t-1):(t-p)] - mu))
epsilon = c(epsilon[-1], new_epsilon)
}
returnVals = list()
returnVals$ts = X[-(1:p)]
returnVals$stationary = stationary(phi)
returnVals$invertible = invertible(theta)
return(returnVals)
}
arma11 = Arma(1000, 0.25, 0.75)
(gamma = acf(arma11$ts, lag.max = length(arma11$ts), type = "covariance"))
gamma = gamma$acf
```{r}
yw_estimate_arma = function(gamma) {
p = length(gamma)
a = matrix(rep(0, p*p), ncol = p)
for (i in 1:p) {
for (j in 1:p) {
a[i,j] = gamma[abs(i-j)+1]
}
}
b = gamma
w = solve(a, b)
return(w)
}
X = arma11$ts
f = 100
n = length(X)
k = 0
Y = numeric(k)
Y
t = n+1
gamma = acf(c(X, Y), lag.max = length(c(X,Y)), plot = FALSE, type = "covariance")
gamma
gamma = gamma$acf[(k+1):(n+k)]
gamma
p = length(gamma)
p
a = matrix(rep(0, p*p), ncol = p)
a
for (i in 1:p) {
for (j in 1:p) {
a[i,j] = gamma[abs(i-j)+1]
}
}
a
b = gamma
w = solve(a, b)
W
w
forecast_arma = forecast_n(arma11$ts, 100)
forecast_n = function(X, f) {
n = length(X)
k = 0
Y = numeric(k)
for (t in (n+1):(n+f)) {
gamma = acf(c(X, Y), lag.max = length(c(X,Y)), plot = FALSE, type = "covariance")
gamma = gamma$acf[(k+1):(n+k)]
weights = yw_estimate_arma(gamma = gamma)
Y[k+1] = weights %*% X
k = k + 1
print(t)
}
return(Y)
}
forecast_n = function(X, f) {
n = length(X)
k = 0
Y = numeric(k)
for (t in (n+1):(n+f)) {
gamma = acf(c(X, Y), lag.max = length(c(X,Y)), plot = FALSE, type = "covariance")
gamma = gamma$acf[(k+1):(n+k)]
weights = yw_estimate_arma(gamma = gamma)
Y[k+1] = weights %*% X
k = k + 1
print(t)
}
return(Y)
}
forecast_arma = forecast_n(arma11$ts, 100)
plot(c(arma11$ts,forecast_arma), type = "l", main = "My ARMA Forecast")
var(arma11$ts)
var(forecast_arma)
invertible = function(theta) {
return(min(Mod(polyroot(theta))) > 1)
}
}
?acf
arma11 = Arma(1000, 0.25, 0.75)
arma11
print(arma11$stationary)
print(arma11$invertible)
print(arma11$stationary & arma11$invertible)
?plot
?Mod
polyroot(c(1, -0.75))
Mod(polyroot(c(1, -0.75)))
forecast_arma = forecast_n(arma11$ts, 1)
plot(forecast_arma, type = "l", main = "ARMA Forecast", xlab="Time", ylab="Y")
forecast_arma = forecast_n(arma11$ts, 10)
plot(forecast_arma, type = "l", main = "ARMA Forecast", xlab="Time", ylab="Y")
gamma
gamma[1]
gamma[2]
gamma = acf(arma11$ts, lag.max = length(arma11$ts), type = "covariance")
gamma[2]
gamma[1]
arma11$ts[1:n]
sum(arma11$ts[1:n])
sum(arma11$ts[1:(n-1)] arma11$ts[2:n])
sum(arma11$ts[1:(n-1)] * arma11$ts[2:n])
sum(arma11$ts[1:(n-1)] * arma11$ts[2:n])/1000
gamma[1]
sum(arma11$ts[2:(n)] * arma11$ts[1:(n-1)])/1000
sum(arma11$ts[3:(n)] * arma11$ts[1:(n-2)])/1000
gamma[2]
gamma = acf(arma11$ts, lag.max = length(arma11$ts), type = "covariance", main="test")
?acf
plot(forecast_arma)
forecast_n = function(X, f) {
n = length(X)
k = 0
Y = numeric(k)
for (t in (n+1):(n+f)) {
gamma = acf(c(X, Y), lag.max = length(c(X,Y)), plot = FALSE, type = "covariance")
gamma = gamma$acf[(k+1):(n+k)]
weights = yw_estimate_arma(gamma = gamma)
Y[k+1] = weights %*% X
k = k + 1
}
return(Y)
}
forecast_arma = forecast_n(arma11$ts, 100)
plot(forecast_arma, type = "l", main = "ARMA Forecast", xlab="Time", ylab="Y")
plot(forecast_arma)
?plot
set.seed(1)
arma11 = Arma(1000, 0.25, 0.75)
gamma = acf(arma11$ts, lag.max = length(arma11$ts),
type = "covariance", main="Autocovariance of ARMA(1,1)")
yw_estimate_arma = function(gamma) {
p = length(gamma)
a = matrix(rep(0, p*p), ncol = p)
for (i in 1:p) {
for (j in 1:p) {
a[i,j] = gamma[abs(i-j)+1]
}
}
b = gamma
w = solve(a, b)
return(w)
}
forecast_n = function(X, f) {
n = length(X)
k = 0
Y = numeric(k)
for (t in (n+1):(n+f)) {
gamma = acf(c(X, Y), lag.max = length(c(X,Y)), plot = FALSE, type = "covariance")
gamma = gamma$acf[(k+1):(n+k)]
weights = yw_estimate_arma(gamma = gamma)
Y[k+1] = weights %*% X
k = k + 1
}
return(Y)
}
forecast_arma = forecast_n(arma11$ts, 100)
plot(forecast_arma, type = "l", main = "ARMA Forecast", xlab="Time", ylab="Y")
plot(forecast_arma, type = "l", main = "ARMA Forecast", xlab="Time", ylab="Y", ylim=c(min(forecast_arma), max(forecast_arma)))
plot(forecast_arma, type = "l", main = "ARMA Forecast", xlab="Time", ylab="Y")
max(forecast_arma) - min(forecast_arma)
max(forecast_arma)
min(forecast_arma)
library(geoR)
packages.install("geoR")
install.packages("geoR")
library(geoR)
library(ggplot2)
library(gridExtra)
data(wolfcamp)
library(geoR)
?lapply
?sapply
?variog
bins = floor(seq(5,400,400/20))
variogs = lapply(bins, function(i) variog(wolfcamp, option = "bin", uvec = i, messages = FALSE, max.dist = 436))
library(geoR)
library(ggplot2)
library(gridExtra)
data(wolfcamp)
bins = floor(seq(5,400,400/20))
variogs = lapply(bins, function(i) variog(wolfcamp, option = "bin", uvec = i, messages = FALSE, max.dist = 436))
?variog
variogs
variogs[1]
plotvariogs[1])
plot(variogs[1])
variogs[1]
variodf = data.frame(bins = bins, pointEstimates = sapply(1:length(variogs), function(i) mean(variogs[[i]]$v)), se = sapply(1:length(variogs), function(i) sd(variogs[[i]]$sd)), mean = sapply(1:length(variogs), function(i) mean(variogs[[i]]$sd)))
p1 = ggplot(variodf, aes(x = bins, y = mean)) + geom_line() + theme_bw() + ggtitle("Mean of Standard Deviation by Number of Bins")
p2 = ggplot(variodf, aes(x = bins, y = pointEstimates)) + geom_line() + theme_bw() + ggtitle("Mean of Point Estimates by Number of Bins")
grid.arrange(p1, p2, ncol = 1)
p2 = ggplot(variodf, aes(x = bins, y = pointEstimates)) + geom_line() + theme_bw() + ggtitle("Mean of Point Estimates by Number of Bins")
p1 = ggplot(variodf, aes(x = bins, y = mean)) + geom_line() + theme_bw() + ggtitle("Mean of Standard Deviation by Number of Bins")
p2 = ggplot(variodf, aes(x = bins, y = pointEstimates)) + geom_line() + theme_bw() + ggtitle("Mean of Point Estimates by Number of Bins")
grid.arrange(p1, p2, ncol = 1) + ylab('Point Estimates')
?ylab
p1 = ggplot(variodf, aes(x = bins, y = mean)) + geom_line() + theme_bw() + ggtitle("Mean of Standard Deviation by Number of Bins")
p2 = ggplot(variodf, aes(x = bins, y = pointEstimates)) + geom_line() + theme_bw() + ggtitle("Mean of Point Estimates by Number of Bins") + ylab("Point Estimates"")
grid.arrange(p1, p2, ncol = 1)
""
p1 = ggplot(variodf, aes(x = bins, y = mean)) + geom_line() + theme_bw() + ggtitle("Mean of Standard Deviation by Number of Bins")
p2 = ggplot(variodf, aes(x = bins, y = pointEstimates)) + geom_line() + theme_bw() + ggtitle("Mean of Point Estimates by Number of Bins") + ylab("Point Estimates")
grid.arrange(p1, p2, ncol = 1)
variodf = data.frame(bins = bins, pointEstimates = sapply(1:length(variogs), function(i) mean(variogs[[i]]$v)), se = sapply(1:length(variogs), function(i) sd(variogs[[i]]$sd)), mean = sapply(1:length(variogs), function(i) mean(variogs[[i]]$sd)))
p1 = ggplot(variodf, aes(x = bins, y = mean)) + geom_line() + theme_bw() + ggtitle("Mean of Standard Deviation by Number of Bins") + xlab("Bins") + ylab("Mean")
p2 = ggplot(variodf, aes(x = bins, y = pointEstimates)) + geom_line() + theme_bw() + ggtitle("Mean of Point Estimates by Number of Bins") + xlab("Bins") + ylab("Point Estimates")
grid.arrange(p1, p2, ncol = 1)
mean(variogs[[1]]$v))
mean(variogs[[1]]$v)
x = variog(wolfcamp, option = "bin", uvec = 20, messages = FALSE, max.dist = 436)
TwentyVariog = data.frame(Distance = x$u, semiVariance = x$v)
p3 = ggplot(data = TwentyVariog, aes(x = Distance, y = semiVariance)) + geom_line() + theme_bw() + ggtitle("Emprical Variogram Plot") + ylab("Semi Variance")
points_by_bin = data.frame(bins = 1:length(x$n), pairs_in_bin = x$n)
p4 = ggplot(data = points_by_bin, aes(x = bins, weight = pairs_in_bin)) + geom_bar(colour = "#000000", fill = "#FF9999", binwidth = 1) + theme_bw() + ylab("Total Pairs in Bin") + xlab("Bin Number") + xlim(c(1, 20)) + ggtitle("Total Pairs in Each Bin")
grid.arrange(p3, p4, ncol = 1)
vario.fit = variofit(x, ini.cov.pars = c(100000, 300), messages = FALSE)
?variofit
?vario.fit
?variofit
?expand.grid
?kridge.conv
?krige.conv
lines.variomodel(cov.model = "matern", cov.pars = estimatedCoefs, kappa = 0.5, max.dist = 340, col = 2, lty = 2, lwd = 2, nugget = 0)
detrend.vario = variog(geodata = wolfcamp, messages = FALSE, trend = "1st", uvec = 20, max.dist = 340)
estimatedCoefs = variofit(detrend.vario, messages = FALSE)$cov.pars
nuggetEstimate = variofit(detrend.vario, messages = FALSE)$nugget
lines.variomodel(cov.model = "matern", cov.pars = estimatedCoefs, kappa = 0.5, max.dist = 340, col = 2, lty = 2, lwd = 2, nugget = 0)
lines.variomodel(cov.model = "matern", cov.pars = estimatedCoefs, kappa = 0.5, max.dist = 340, col = 3, lty = 3, lwd = 3, nugget = nuggetEstimate)
libray(ggplot2)
library(ggplot2)
setwd('~/Documents/University/Indoor-Location/locationcode/SpatialStatistics/')
source("R/TidyData.R")
data = cleanData("Xperia_data.csv")
data = cleanData("Combined_XY.csv")
data = data %>% group_by(x,y,address) %>% summarise(count = n())
data
estimote = "A2" # Enter an estimote name here
x = -3.3 # Enter a surveyed position here
y = 7.25
ggplot(data %>% filter(address == estimote & x == x & y == y), aes(x = x, y = y, label = count)) +
geom_text() +
ggtitle("Don't forget to put a good title")
ggplot(data %>% filter(address == estimote), aes(x = x, y = y, label = count)) +
geom_text() +
facet_wrap(~x+y) +
ggtitle("Don't forget to put a good title")
data
plot(data)
ggplot(data %>% filter(address == estimote & x == x & y == y), aes(x = x, y = y, label = count)) +
geom_text() +
ggtitle("Don't forget to put a good title")
data = cleanData("Room2_XY_combined.csv")
data = data %>% group_by(x,y,address) %>% summarise(count = n())
estimote = "A2" # Enter an estimote name here
x = -3.3 # Enter a surveyed position here
y = 7.25
ggplot(data %>% filter(address == estimote & x == x & y == y), aes(x = x, y = y, label = count)) +
geom_text() +
ggtitle("Don't forget to put a good title")
data %>% filter(address == estimote & x == x & y == y
)
x
y
data = data %>% group_by(x,y,address) %>% summarise(count = n())
data
data = data %>% group_by(x,y,address) %>% summarise(count = n())
estimote = "A2" # Enter an estimote name here
x = -3.3 # Enter a surveyed position here
y = 7.25
ggplot(data %>% filter(x == x & y == y), aes(x = x, y = y, label = count)) +
geom_text() +
ggtitle("Number of advertisement packets received by each beacon within a scan period of 1 minute")
data
estimote = "A2" # Enter an estimote name here
x = -3.3 # Enter a surveyed position here
y = 7.25
ggplot(data %>% filter(address == estimote & x == x & y == y), aes(x = x, y = y, label = count)) +
geom_text() +
ggtitle("Number of advertisement packets received by each beacon within a scan period of 1 minute")
data = data %>% group_by(x,y,address) %>% summarise(count = n())
estimote = "A2" # Enter an estimote name here
x = -3.3 # Enter a surveyed position here
y = 7.25
ggplot(data %>% filter(address == estimote & x == x & y == y), aes(x = x, y = y, label = count)) +
geom_text() +
ggtitle("Number of advertisement packets received by each beacon within a scan period of 1 minute")
library(ggplot2)
setwd('~/Documents/University/Indoor-Location/locationcode/SpatialStatistics/')
source("R/TidyData.R")
data = cleanData("Room2_XY_combined.csv")
data = data %>% group_by(x,y,address) %>% summarise(count = n())
estimote = "A2" # Enter an estimote name here
x = -3.3 # Enter a surveyed position here
y = 7.25
ggplot(data %>% filter(address == estimote & x == x & y == y), aes(x = x, y = y, label = count)) +
geom_text() +
ggtitle("Number of advertisement packets received by each beacon within a scan period of 1 minute")
ggplot(data %>% filter(address == estimote & x == x & y == y), aes(x = x, y = y, label = count)) +
geom_text() +
ggtitle("Number of advertisement packets received by each beacon within a scan period of 1 minute")
ggplot(data %>% filter( x == x & y == y), aes(x = x, y = y, label = count)) +
geom_text() +
ggtitle("Number of advertisement packets received by each beacon within a scan period of 1 minute")
ggplot(data %>% filter( x == x & y == y), aes(x = x, y = y, label = count)) +
geom_text() +
ggtitle("Number of advertisement packets received by each beacon within a scan period of 1 minute")
data %>% filter( x == x & y == y)
data = data %>% group_by(x,y,address) %>% summarise(count = n())
x = -3.3 # Enter a surveyed position here
y = 7.25
data
data %>% filter( x == x & y == y)
x
y
data
full
library(ggplot2)
setwd('~/Documents/University/Indoor-Location/locationcode/SpatialStatistics/')
source("R/TidyData.R")
data = cleanData("Combined_XY.csv")
data = data %>% group_by(x,y,address) %>% summarise(count = n())
estimote = "A2" # Enter an estimote name here
x = -3.3 # Enter a surveyed position here
y = 7.25
ggplot(data %>% filter(address == estimote & x == x & y == y), aes(x = x, y = y, label = count)) +
geom_text() +
ggtitle("Don't forget to put a good title")
setwd('~/Documents/University/Indoor-Location/locationcode/SpatialStatistics/')
libray(ggplot2)
source("R/TidyData.R")
library(ggplot2)
source("R/TidyData.R")
data = cleanData("Combined/Combined_XY.csv")
data = cleanData("Combined_XY.csv")
data = data %>% group_by(x,y,address) %>% summarise(count = n()) %>% filter()
estimote = "A2" # Enter an estimote name here
ggplot(data %>% filter(address == estimote & x > 0 & x < 10), aes(x = x, y = y, label = count)) +
geom_text() +
ggtitle("Don't forget to put a good title")
ggplot(data %>% filter(address == estimote & x > 0 & x < 10), aes(x = x, y = y, label = count)) +
geom_text() +
ggtitle("Number of advertisement packets received from beacon 'A2' after scanning for a minute at a range of locations.")
ggplot(data %>% filter(address == estimote & x > 0 & x < 10), aes(x = x, y = y, label = count)) +
geom_text() +
ggtitle("Number of advertisement packets received from beacon 'A2'\n after scanning for a minute at a range of locations.")
